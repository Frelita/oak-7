import threading  # Untuk membuat thread yang berjalan secara paralel
import random     # Untuk memilih operasi secara acak (read/write)

# Memori bersama yang bisa diakses semua thread
shared_memory = {"x": 0}

# Variabel untuk mencatat jumlah akses ke memori (traffic cache)
# dan jumlah pesan koherensi yang dikirim antar thread
cache_traffic = {"with": 0, "without": 0}
coherence_messages = 0

# Konfigurasi jumlah thread (simulasi jumlah core) dan banyaknya operasi yang dilakukan tiap thread
NUM_THREADS = 4
NUM_OPERATIONS = 100

# Fungsi: Simulasi TANPA protokol koherensi cache
def thread_no_coherence(thread_id):
    local_cache = {}  # Cache lokal milik masing-masing thread
    for _ in range(NUM_OPERATIONS):
        if random.random() < 0.5:
            # Operasi READ
            if "x" not in local_cache:
                # Jika data belum ada di cache lokal, ambil dari memori
                local_cache["x"] = shared_memory["x"]
                cache_traffic["without"] += 1  # Tambah hitungan traffic
            _ = local_cache["x"]  # Baca dari cache lokal
        else:
            # Operasi WRITE
            local_cache["x"] = thread_id           # Tulis ke cache lokal
            shared_memory["x"] = thread_id         # Tulis juga ke memori bersama
            cache_traffic["without"] += 1          # Hitung sebagai traffic ke memori

# Fungsi: Simulasi DENGAN protokol koherensi cache (MSI sederhana)
def thread_with_coherence(thread_id, cache_states, lock):
    global coherence_messages  # Gunakan variabel global
    local_cache = {}  # Cache lokal untuk thread ini

    for _ in range(NUM_OPERATIONS):
        op = random.choice(["read", "write"])  # Pilih operasi secara acak

        with lock:  # Pastikan akses memori sinkron antar thread
            if op == "read":
                # Jika status cache saat ini Invalid, ambil dari memori
                if cache_states[thread_id] == "I":
                    local_cache["x"] = shared_memory["x"]  # Ambil data dari memori
                    cache_states[thread_id] = "S"          # Tandai sebagai Shared
                    cache_traffic["with"] += 1             # Tambah traffic
                    coherence_messages += 1                # Hitung pesan koherensi (fetch)
                _ = local_cache["x"]  # Baca dari cache lokal

            else:  # Jika operasi adalah WRITE
                # Invalidate semua cache thread lain
                for i in range(NUM_THREADS):
                    if i != thread_id and cache_states[i] != "I":
                        cache_states[i] = "I"       # Ubah cache thread lain ke Invalid
                        coherence_messages += 1     # Hitung sebagai pesan koherensi

                # Tulis ke memori dan tandai cache sendiri sebagai Modified
                shared_memory["x"] = thread_id
                local_cache["x"] = thread_id
                cache_states[thread_id] = "M"       # Cache sendiri sekarang eksklusif (Modified)
                cache_traffic["with"] += 1          # Hitung traffic karena tulis ke memori

# Fungsi utama: Menjalankan kedua simulasi (dengan dan tanpa koherensi)
def run_simulation():
    global shared_memory, cache_traffic, coherence_messages

    # Reset nilai-nilai untuk awal simulasi
    shared_memory = {"x": 0}
    cache_traffic = {"with": 0, "without": 0}
    coherence_messages = 0

    # ====================
    # Simulasi TANPA KOHERENSI
    # ====================
    print("Simulasi tanpa koherensi...")
    threads = []  # Daftar thread yang akan dijalankan
    for i in range(NUM_THREADS):
        t = threading.Thread(target=thread_no_coherence, args=(i,))
        threads.append(t)
        t.start()  # Mulai eksekusi thread
    for t in threads:
        t.join()  # Tunggu sampai semua thread selesai

    print(f"Total cache traffic tanpa koherensi: {cache_traffic['without']}")
    print()

    # ====================
    # Simulasi DENGAN KOHERENSI MSI
    # ====================
    print("Simulasi dengan koherensi (MSI)...")
    shared_memory = {"x": 0}                 # Reset memori bersama
    cache_states = ["I"] * NUM_THREADS       # Semua cache awalnya invalid
    lock = threading.Lock()                  # Lock digunakan agar thread sinkron

    threads = []  # Buat ulang daftar thread
    for i in range(NUM_THREADS):
        t = threading.Thread(target=thread_with_coherence, args=(i, cache_states, lock))
        threads.append(t)
        t.start()  # Mulai thread
    for t in threads:
        t.join()  # Tunggu semua thread selesai

    # Cetak hasil dari simulasi dengan protokol MSI
    print(f"Total cache traffic dengan koherensi: {cache_traffic['with']}")
    print(f"Total pesan koherensi: {coherence_messages}")
    print()

    # ====================
    # PERBANDINGAN
    # ====================
    print("Perbandingan:")
    print(f"Cache Traffic (Tanpa Koherensi): {cache_traffic['without']}")
    print(f"Cache Traffic (Dengan Koherensi): {cache_traffic['with']}")
    print(f"Pesan Koherensi yang Dikirim: {coherence_messages}")

# Entry point saat file dijalankan
if __name__ == "__main__":
    run_simulation()
